import React, { useState, useEffect, useCallback } from 'react';

// Removed Firebase imports as we are switching to Google Sheets via Apps Script
// import { initializeApp } from 'firebase/app';
// import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, signInWithEmailAndPassword, signOut } from 'firebase/auth';
// import { getFirestore, collection, addDoc, query, onSnapshot, serverTimestamp } from 'firebase/firestore';

// Ensure Tailwind CSS is available in the environment.
// This script tag is typically included in the main HTML file, not directly in React code.
// <script src="https://cdn.tailwindcss.com"></script>

function App() {
  // Removed Firebase related states
  // const [db, setDb] = useState(null);
  // const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null); // Keeping userId for display, but it's not from Firebase Auth anymore
  const [isAuthReady, setIsAuthReady] = useState(true); // Always ready as no complex auth init
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [modalMessage, setModalMessage] = useState('');
  const [currentPage, setCurrentPage] = useState('dashboard'); // State to manage current view

  // Login form states (will be simplified/removed as direct login is insecure)
  const [loginEmail, setLoginEmail] = useState('');
  const [loginPassword, setLoginPassword] = useState('');
  const [loginError, setLoginError] = useState('');

  // Form states for transactions
  const [date, setDate] = useState('');
  const [description, setDescription] = useState('');
  const [type, setType] = useState('আয়'); // আয় (Income), ব্যয় (Expense), উত্তোলন (Withdrawal)
  const [amount, setAmount] = useState('');
  const [person, setPerson] = useState(''); // For withdrawal type

  // Monthly report states
  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());

  // Date range filter states for "সকল লেনদেন"
  const [filterStartDate, setFilterStartDate] = useState('');
  const [filterEndDate, setFilterEndDate] = useState('');

  // Receipt filter states
  const [receiptFilterType, setReceiptFilterType] = useState(''); // 'আয়', 'ব্যয়', 'উত্তোলন', or '' for all
  const [receiptFilterPerson, setReceiptFilterPerson] = useState('');
  const [receiptFilterStartDateReceipt, setReceiptFilterStartDateReceipt] = useState('');
  const [receiptFilterEndDateReceipt, setReceiptFilterEndDateReceipt] = useState('');


  // Define your Google Apps Script Web App URL here
  // IMPORTANT: Replace this with the URL you got after deploying your Apps Script
  const GOOGLE_APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbw2neYNM-edRL9Av3TCjlKKtzCxQe700gTzvugvYCwzDQMyIwglkO0KvjxIDES0Rg_NMg/exec'; // Your provided URL

  // Function to fetch transactions from Google Sheet via Apps Script
  const fetchTransactions = useCallback(async () => {
    setLoading(true);
    try {
      const response = await fetch(GOOGLE_APPS_SCRIPT_URL, {
        method: 'GET',
        // mode: 'no-cors' // May be needed depending on Apps Script CORS settings, but usually not for GET
      });
      const data = await response.json();
      // Assuming data is an array of objects
      // Sort client-side by timestamp (if available) or date
      data.sort((a, b) => {
        const dateA = a.Timestamp ? new Date(a.Timestamp) : new Date(a.Date);
        const dateB = b.Timestamp ? new Date(b.Timestamp) : new Date(b.Date);
        return dateB - dateA; // Newest first
      });
      setTransactions(data);
    } catch (error) {
      console.error("Error fetching transactions:", error);
      setModalMessage(`লেনদেন লোড করতে সমস্যা হয়েছে: ${error.message}`);
      setShowModal(true);
    } finally {
      setLoading(false);
    }
  }, [GOOGLE_APPS_SCRIPT_URL]); // Added GOOGLE_APPS_SCRIPT_URL to dependency array

  // Initial load effect (simplified as no Firebase Auth)
  useEffect(() => {
    // Simulate auth ready and a dummy user ID for display if needed
    // In a real scenario, if you want a persistent ID, you'd use localStorage or similar.
    // For now, we'll just set it to a static value or remove it if not needed.
    // setUserId('google-sheet-user'); // Or remove if not showing user ID
    setLoading(false);
    fetchTransactions(); // Fetch transactions on initial load
  }, [fetchTransactions]); // Added fetchTransactions to dependency array for useCallback

  // Handle form submission to Google Sheet via Apps Script
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!date || !description || !amount) {
      setModalMessage('তারিখ, বিবরণ এবং টাকার পরিমাণ পূরণ করুন।');
      setShowModal(true);
      return;
    }

    const transactionAmount = parseFloat(amount);
    if (isNaN(transactionAmount) || transactionAmount <= 0) {
      setModalMessage('টাকার পরিমাণ অবশ্যই একটি ধনাত্মক সংখ্যা হতে হবে।');
      setShowModal(true);
      return;
    }

    setLoading(true);
    try {
      const payload = {
        date: date, // YYYY-MM-DD string
        description: description,
        type: type,
        amount: transactionAmount,
        person: type === 'উত্তোলন' ? person : '',
      };

      const response = await fetch(GOOGLE_APPS_SCRIPT_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'text/plain;charset=utf-8', // Apps Script expects plain text for postData
        },
        body: JSON.stringify(payload),
        // mode: 'no-cors' // May be needed depending on Apps Script CORS settings
      });

      const result = await response.json();
      if (result.status === 'success') {
        setModalMessage('লেনদেন সফলভাবে যোগ করা হয়েছে!');
        setShowModal(true);
        // Refetch transactions to update the lists
        fetchTransactions();

        // Reset form fields
        setDate('');
        setDescription('');
        setAmount('');
        setPerson('');
        setType('আয়');
      } else {
        setModalMessage(`লেনদেন যোগ করতে সমস্যা হয়েছে: ${result.message || 'অজানা ত্রুটি'}`);
        setShowModal(true);
      }

    } catch (error) {
      console.error("Error adding transaction:", error);
      setModalMessage(`লেনদেন যোগ করতে সমস্যা হয়েছে: ${error.message}`);
      setShowModal(true);
    } finally {
      setLoading(false);
    }
  };

  // Calculate monthly summary
  const getMonthlySummary = useCallback(() => {
    const startOfMonth = new Date(selectedYear, selectedMonth - 1, 1);
    const endOfMonth = new Date(selectedYear, selectedMonth, 0);

    let totalIncome = 0;
    let totalExpense = 0;
    const totalWithdrawals = {};

    const filteredTransactions = transactions.filter(t => {
      const transactionDate = t.Date ? new Date(t.Date) : null; // Use t.Date from Google Sheet
      return transactionDate && transactionDate >= startOfMonth && transactionDate <= endOfMonth;
    });

    filteredTransactions.forEach(t => {
      if (t.Type === 'আয়') { // Use t.Type from Google Sheet
        totalIncome += parseFloat(t.Amount); // Ensure amount is parsed as number
      } else if (t.Type === 'ব্যয়') {
        totalExpense += parseFloat(t.Amount);
      } else if (t.Type === 'উত্তোলন') {
        const personName = t.Person || 'অজানা'; // Use t.Person from Google Sheet
        totalWithdrawals[personName] = (totalWithdrawals[personName] || 0) + parseFloat(t.Amount);
      }
    });

    const netBalance = totalIncome - totalExpense - Object.values(totalWithdrawals).reduce((sum, val) => sum + val, 0);

    return { totalIncome, totalExpense, totalWithdrawals, netBalance, filteredTransactions };
  }, [transactions, selectedMonth, selectedYear]);

  const { totalIncome, totalExpense, totalWithdrawals, netBalance, filteredTransactions: monthlyTransactions } = getMonthlySummary();

  // Get filtered transactions for "সকল লেনদেন" based on date range
  const getFilteredAllTransactions = useCallback(() => {
    let filtered = transactions;

    if (filterStartDate) {
      const start = new Date(filterStartDate);
      filtered = filtered.filter(t => {
        const transactionDate = t.Date ? new Date(t.Date) : null;
        return transactionDate && transactionDate >= start;
      });
    }

    if (filterEndDate) {
      const end = new Date(filterEndDate);
      // Set end date to end of the day to include transactions on the end date
      end.setHours(23, 59, 59, 999);
      filtered = filtered.filter(t => {
        const transactionDate = t.Date ? new Date(t.Date) : null;
        return transactionDate && transactionDate <= end;
      });
    }
    return filtered;
  }, [transactions, filterStartDate, filterEndDate]);

  const filteredAllTransactions = getFilteredAllTransactions();

  // Get filtered transactions for Receipt based on filters
  const getFilteredReceiptTransactions = useCallback(() => {
    let filtered = transactions;

    if (receiptFilterType) {
      filtered = filtered.filter(t => t.Type === receiptFilterType);
    }
    if (receiptFilterPerson) {
      filtered = filtered.filter(t => t.Person && t.Person.toLowerCase().includes(receiptFilterPerson.toLowerCase()));
    }
    if (receiptFilterStartDateReceipt) {
      const start = new Date(receiptFilterStartDateReceipt);
      filtered = filtered.filter(t => {
        const transactionDate = t.Date ? new Date(t.Date) : null;
        return transactionDate && transactionDate >= start;
      });
    }
    if (receiptFilterEndDateReceipt) {
      const end = new Date(receiptFilterEndDateReceipt);
      end.setHours(23, 59, 59, 999);
      filtered = filtered.filter(t => {
        const transactionDate = t.Date ? new Date(t.Date) : null;
        return transactionDate && transactionDate <= end;
      });
    }

    return filtered;
  }, [transactions, receiptFilterType, receiptFilterPerson, receiptFilterStartDateReceipt, receiptFilterEndDateReceipt]);

  const filteredReceiptTransactions = getFilteredReceiptTransactions();
  const totalReceiptAmount = filteredReceiptTransactions.reduce((sum, t) => sum + parseFloat(t.Amount || 0), 0);

  // Function to generate a simple receipt number (3 digits)
  const generateReceiptNumber = () => {
    return Math.floor(100 + Math.random() * 900);
  };
  const [receiptNumber, setReceiptNumber] = useState(generateReceiptNumber());

  // Function to handle printing
  const handlePrint = () => {
    window.print();
  };

  // Handle month/year change for report
  const handleMonthChange = (e) => setSelectedMonth(parseInt(e.target.value));
  const handleYearChange = (e) => setSelectedYear(parseInt(e.target.value));

  // Get current date in YYYY-MM-DD format for default date input
  const getTodayDate = () => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  useEffect(() => {
    setDate(getTodayDate()); // Set default date to today
  }, []);

  if (loading && !transactions.length) { // Only show loading if no transactions are loaded yet
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-900 text-neon-blue"> {/* Changed text color here */}
        <div className="text-xl animate-pulse">লোড হচ্ছে...</div>
      </div>
    );
  }

  // Main App content rendering
  return (
    <div className="min-h-screen bg-gray-900 text-neon-green font-inter p-4 sm:p-6 lg:p-8">
      {/* Navigation Bar */}
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl sm:text-3xl font-bold text-neon-blue drop-shadow-lg">
          দোকানের হিসাব-নিকাশ
        </h1>
        <div className="flex space-x-2 sm:space-x-4"> {/* Adjusted spacing for smaller screens */}
          {/* Only show "সকল লেনদেন" button now */}
          <button
            onClick={() => setCurrentPage('allTransactions')}
            className="py-2 px-3 sm:px-4 rounded-lg bg-gradient-to-r from-neon-blue to-neon-green text-neon-blue font-semibold text-xs sm:text-sm hover:from-neon-blue-light hover:to-neon-green-light transition-all duration-300 shadow-neon-glow"
          >
            সকল লেনদেন
          </button>
        </div>
      </div>
      {/* Removed User ID display as it's not relevant for Google Sheets direct integration */}
      {/* <div className="text-right text-xs text-neon-blue mb-8">
        {userId ? `ব্যবহারকারী আইডি: ${userId}` : ''}
      </div> */}


      {currentPage === 'dashboard' && (
        <>
          {/* Transaction Input Form - ALWAYS VISIBLE ON DASHBOARD */}
          <div className="bg-gray-800 rounded-xl p-6 mb-8 shadow-2xl border border-neon-blue-dark">
            <h2 className="text-2xl font-semibold text-neon-green mb-6 text-center">নতুন লেনদেন যোগ করুন</h2>
            <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="date" className="block text-sm font-medium text-neon-green-light mb-1">তারিখ</label>
                <input
                  type="date"
                  id="date"
                  value={date}
                  onChange={(e) => setDate(e.target.value)}
                  className="w-full p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner"
                  required
                />
              </div>
              <div>
                <label htmlFor="description" className="block text-sm font-medium text-neon-green-light mb-1">বিবরণ</label>
                <input
                  type="text"
                  id="description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="পণ্যের বিক্রয়, বিদ্যুৎ বিল, বেতন"
                  className="w-full p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner"
                  required
                />
              </div>
              <div>
                <label htmlFor="type" className="block text-sm font-medium text-neon-green-light mb-1">ধরন</label>
                <select
                  id="type"
                  value={type}
                  onChange={(e) => setType(e.target.value)}
                  className="w-full p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner"
                >
                  <option value="আয়">আয়</option>
                  <option value="ব্যয়">ব্যয়</option>
                  <option value="উত্তোলন">উত্তোলন</option>
                </select>
              </div>
              <div>
                <label htmlFor="amount" className="block text-sm font-medium text-neon-green-light mb-1">টাকার পরিমাণ</label>
                <input
                  type="number"
                  id="amount"
                  value={amount}
                  onChange={(e) => setAmount(e.target.value)}
                  placeholder="উদাহরণ: ৫০০"
                  className="w-full p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner"
                  min="0.01"
                  step="0.01"
                  required
                />
              </div>
              {type === 'উত্তোলন' && (
                <div>
                  <label htmlFor="person" className="block text-sm font-medium text-neon-green-light mb-1">উত্তোলনকারী ব্যক্তি</label>
                  <input
                    type="text"
                    id="person"
                    value={person}
                    onChange={(e) => setPerson(e.target.value)}
                    placeholder="ব্যক্তির নাম"
                    className="w-full p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner"
                    required={type === 'উত্তোলন'}
                  />
                </div>
              )}
              <div className={`md:col-span-2 ${type === 'উত্তোলন' ? '' : 'mt-4'}`}>
                <button
                  type="submit"
                  className="w-full py-3 px-6 rounded-lg bg-gradient-to-r from-neon-blue to-neon-green text-neon-green font-bold text-lg hover:from-neon-blue-light hover:to-neon-green-light transition-all duration-300 transform hover:scale-105 shadow-neon-glow"
                >
                  লেনদেন যোগ করুন
                </button>
              </div>
            </form>
          </div>
        </>
      )}

      {/* Removed dedicated login page as direct login is insecure */}
      {/* {currentPage === 'login' && !userId && isAuthReady && ( ... )} */}

      {currentPage === 'allTransactions' && ( // This page now includes monthly report
        <>
          <button
            onClick={() => setCurrentPage('dashboard')}
            className="mb-6 py-2 px-4 rounded-lg bg-gradient-to-r from-neon-blue to-neon-green text-neon-blue font-semibold text-sm hover:from-neon-blue-light hover:to-neon-green-light transition-all duration-300 shadow-neon-glow"
          >
            ← ড্যাশবোর্ডে ফিরে যান
          </button>

          {/* Monthly Report Section - Now inside All Transactions */}
          <div className="bg-gray-800 rounded-xl p-6 mb-8 shadow-2xl border border-neon-blue-dark">
            <h2 className="text-2xl font-semibold text-neon-green mb-6 text-center">মাসিক হিসাব প্রতিবেদন</h2>
            <div className="flex flex-col sm:flex-row gap-4 mb-6 justify-center">
              <select
                value={selectedMonth}
                onChange={handleMonthChange}
                className="p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner flex-grow"
              >
                {[...Array(12).keys()].map(i => (
                  <option key={i + 1} value={i + 1}>
                    {new Date(2000, i, 1).toLocaleString('bn-BD', { month: 'long' })}
                  </option>
                ))}
              </select>
              <input
                type="number"
                value={selectedYear}
                onChange={handleYearChange}
                placeholder="বছর"
                className="p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner flex-grow"
                min="2000"
                max="2100"
              />
            </div>

            <div className="text-lg text-neon-green-light mb-4 p-4 rounded-lg bg-gray-700 border border-neon-blue">
              <p className="mb-2">মোট আয়: <span className="font-bold text-neon-green">{totalIncome.toLocaleString('bn-BD')} টাকা</span></p>
              <p className="mb-2">মোট ব্যয়: <span className="font-bold text-red-400">{totalExpense.toLocaleString('bn-BD')} টাকা</span></p>
              <h3 className="font-semibold text-neon-blue-light mt-4 mb-2">উত্তোলনসমূহ:</h3>
              {Object.keys(totalWithdrawals).length > 0 ? (
                <ul className="list-disc list-inside ml-4">
                  {Object.entries(totalWithdrawals).map(([personName, amount]) => (
                    <li key={personName} className="text-sm">
                      {personName}: <span className="font-bold text-orange-400">{amount.toLocaleString('bn-BD')} টাকা</span>
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-sm italic ml-4">কোনো উত্তোলন পাওয়া যায়নি।</p>
              )}
              <p className="mt-4 text-xl font-bold">মাসিক মোট লাভ/ক্ষতি: <span className={`${netBalance >= 0 ? 'text-neon-green' : 'text-red-500'}`}>{netBalance.toLocaleString('bn-BD')} টাকা</span></p>
            </div>

            {monthlyTransactions.length > 0 && (
                <div className="mt-6">
                    <h3 className="text-xl font-semibold text-neon-green-light mb-4 text-center">মাসিক লেনদেনের বিস্তারিত</h3>
                    <div className="overflow-x-auto rounded-lg border border-neon-blue-dark shadow-inner">
                        <table className="min-w-full bg-gray-700 rounded-lg overflow-hidden">
                            <thead className="bg-gray-600 text-neon-blue-light uppercase text-sm leading-normal">
                                <tr>
                                    <th className="py-3 px-6 text-left">তারিখ</th>
                                    <th className="py-3 px-6 text-left">বিবরণ</th>
                                    <th className="py-3 px-6 text-left">ধরন</th>
                                    <th className="py-3 px-6 text-right">পরিমাণ</th>
                                    <th className="py-3 px-6 text-left">উত্তোলনকারী</th>
                                </tr>
                            </thead>
                            <tbody className="text-gray-200 text-sm font-light">
                                {monthlyTransactions.map((t, index) => (
                                    <tr key={t.Timestamp ? t.Timestamp : t.Date + index} className={`border-b border-gray-600 hover:bg-gray-650 ${index % 2 === 0 ? 'bg-gray-700' : 'bg-gray-750'}`}>
                                        <td className="py-3 px-6 whitespace-nowrap">{t.Date ? new Date(t.Date).toLocaleDateString('bn-BD') : ''}</td>
                                        <td className="py-3 px-6">{t.Description}</td>
                                        <td className="py-3 px-6">
                                            <span className={`py-1 px-3 rounded-full text-xs font-semibold
                                                ${t.Type === 'আয়' ? 'bg-neon-green/30 text-neon-green' :
                                                  t.Type === 'ব্যয়' ? 'bg-red-500/30 text-red-400' :
                                                  'bg-orange-500/30 text-orange-400'}`
                                            }>
                                                {t.Type}
                                            </span>
                                        </td>
                                        <td className="py-3 px-6 text-right font-mono">
                                            {parseFloat(t.Amount).toLocaleString('bn-BD')}
                                        </td>
                                        <td className="py-3 px-6">{t.Person || '-'}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>
            )}
          </div>

          {/* All Transactions List */}
          <div className="bg-gray-800 rounded-xl p-6 shadow-2xl border border-neon-blue-dark">
            <h2 className="text-2xl font-semibold text-neon-green mb-6 text-center">সকল লেনদেনের তালিকা</h2>
            {/* Date Range Filter for All Transactions */}
            <div className="flex flex-col sm:flex-row gap-4 mb-6 justify-center">
                <div>
                    <label htmlFor="filterStartDate" className="block text-sm font-medium text-neon-green-light mb-1">শুরুর তারিখ</label>
                    <input
                        type="date"
                        id="filterStartDate"
                        value={filterStartDate}
                        onChange={(e) => setFilterStartDate(e.target.value)}
                        className="w-full p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner"
                    />
                </div>
                <div>
                    <label htmlFor="filterEndDate" className="block text-sm font-medium text-neon-green-light mb-1">শেষের তারিখ</label>
                    <input
                        type="date"
                        id="filterEndDate"
                        value={filterEndDate}
                        onChange={(e) => setFilterEndDate(e.target.value)}
                        className="w-full p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner"
                    />
                </div>
            </div>
            <div className="overflow-x-auto rounded-lg border border-neon-blue-dark shadow-inner">
                <table className="min-w-full bg-gray-700 rounded-lg overflow-hidden">
                    <thead className="bg-gray-600 text-neon-blue-light uppercase text-sm leading-normal">
                        <tr>
                            <th className="py-3 px-6 text-left">তারিখ</th>
                            <th className="py-3 px-6 text-left">বিবরণ</th>
                            <th className="py-3 px-6 text-left">ধরন</th>
                            <th className="py-3 px-6 text-right">পরিমাণ</th>
                            <th className="py-3 px-6 text-left">উত্তোলনকারী</th>
                        </tr>
                    </thead>
                    <tbody className="text-gray-200 text-sm font-light">
                        {filteredAllTransactions.length > 0 ? (
                            filteredAllTransactions.map((t, index) => (
                                <tr key={t.Timestamp ? t.Timestamp : t.Date + index} className={`border-b border-gray-600 hover:bg-gray-650 ${index % 2 === 0 ? 'bg-gray-700' : 'bg-gray-750'}`}>
                                    <td className="py-3 px-6 whitespace-nowrap">{t.Date ? new Date(t.Date).toLocaleDateString('bn-BD') : ''}</td>
                                    <td className="py-3 px-6">{t.Description}</td>
                                    <td className="py-3 px-6">
                                        <span className={`py-1 px-3 rounded-full text-xs font-semibold
                                            ${t.Type === 'আয়' ? 'bg-neon-green/30 text-neon-green' :
                                              t.Type === 'ব্যয়' ? 'bg-red-500/30 text-red-400' :
                                              'bg-orange-500/30 text-orange-400'}`
                                        }>
                                            {t.Type}
                                        </span>
                                    </td>
                                    <td className="py-3 px-6 text-right font-mono">
                                        {parseFloat(t.Amount).toLocaleString('bn-BD')}
                                    </td>
                                    <td className="py-3 px-6">{t.Person || '-'}</td>
                                </tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan="5" className="py-6 text-center text-gray-400">কোনো লেনদেন পাওয়া যায়নি।</td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>
          </div>

          {/* Receipt Section */}
          <div className="bg-gray-800 rounded-xl p-6 mt-8 shadow-2xl border border-neon-blue-dark">
            {/* Removed the "রসিদ তৈরি করুন" heading */}
            <div className="flex flex-col sm:flex-row gap-4 mb-6 justify-center">
                <div>
                    <label htmlFor="receiptFilterType" className="block text-sm font-medium text-neon-green-light mb-1">ধরন</label>
                    <select
                        id="receiptFilterType"
                        value={receiptFilterType}
                        onChange={(e) => setReceiptFilterType(e.target.value)}
                        className="w-full p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner"
                    >
                        <option value="">সব</option>
                        <option value="আয়">আয়</option>
                        <option value="ব্যয়">ব্যয়</option>
                        <option value="উত্তোলন">উত্তোলন</option>
                    </select>
                </div>
                <div>
                    <label htmlFor="receiptFilterPerson" className="block text-sm font-medium text-neon-green-light mb-1">উত্তোলনকারী</label>
                    <input
                        type="text"
                        id="receiptFilterPerson"
                        value={receiptFilterPerson}
                        onChange={(e) => setReceiptFilterPerson(e.target.value)}
                        placeholder="ব্যক্তির নাম"
                        className="w-full p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner"
                    />
                </div>
                <div>
                    <label htmlFor="receiptFilterStartDateReceipt" className="block text-sm font-medium text-neon-green-light mb-1">শুরুর তারিখ</label>
                    <input
                        type="date"
                        id="receiptFilterStartDateReceipt"
                        value={receiptFilterStartDateReceipt}
                        onChange={(e) => setReceiptFilterStartDateReceipt(e.target.value)}
                        className="w-full p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner"
                    />
                </div>
                <div>
                    <label htmlFor="receiptFilterEndDateReceipt" className="block text-sm font-medium text-neon-green-light mb-1">শেষের তারিখ</label>
                    <input
                        type="date"
                        id="receiptFilterEndDateReceipt"
                        value={receiptFilterEndDateReceipt}
                        onChange={(e) => setReceiptFilterEndDateReceipt(e.target.value)}
                        className="w-full p-3 rounded-lg bg-gray-700 text-white border border-neon-blue focus:outline-none focus:ring-2 focus:ring-neon-blue-light shadow-inner"
                    />
                </div>
            </div>

            <div id="receipt-content" className="bg-gray-700 rounded-lg p-6 border border-neon-blue text-white font-mono print-area">
                <div className="text-center mb-6">
                    <h3 className="text-neon-green text-3xl font-bold">Unique Computer & Online Platform</h3>
                </div>
                <div className="flex justify-between text-lg mb-4">
                    <p>তারিখ: {new Date().toLocaleDateString('bn-BD')}</p>
                    <p>রসিদ নং: #{receiptNumber}</p>
                </div>
                <div className="border-t border-b border-dashed border-gray-500 py-4 mb-4">
                    <p className="text-left text-sm font-semibold text-neon-blue-light mb-2">লেনদেনের বিবরণ:</p>
                    {filteredReceiptTransactions.length > 0 ? (
                        <ul className="list-none ml-0 text-left text-base"> {/* Changed to list-none for custom formatting */}
                            <li className="grid grid-cols-5 gap-2 font-bold text-neon-blue-light pb-2 border-b border-dashed border-gray-600">
                                <span className="col-span-1">তারিখ</span>
                                <span className="col-span-2">বিবরণ</span>
                                <span className="col-span-1 text-right">পরিমাণ</span>
                                <span className="col-span-1">উত্তোলনকারী</span>
                            </li>
                            {filteredReceiptTransactions.map((t, index) => (
                                <li key={t.Timestamp ? t.Timestamp : t.Date + index} className="grid grid-cols-5 gap-2 py-1">
                                    <span className="col-span-1">{t.Date ? new Date(t.Date).toLocaleDateString('bn-BD') : ''}</span>
                                    <span className="col-span-2">{t.Description} ({t.Type})</span>
                                    <span className="col-span-1 text-right">{parseFloat(t.Amount).toLocaleString('bn-BD')} টাকা</span>
                                    <span className="col-span-1">{t.Person || '-'}</span>
                                </li>
                            ))}
                            <li className="mt-4 pt-2 border-t border-dashed border-gray-600 text-xl font-bold text-neon-green-light text-right col-span-5">
                                মোট পরিমাণ: {totalReceiptAmount.toLocaleString('bn-BD')} টাকা
                            </li>
                        </ul>
                    ) : (
                        <p className="text-base italic text-center">কোনো লেনদেন পাওয়া যায়নি।</p>
                    )}
                </div>

                <div className="flex justify-between mt-8 text-sm">
                    <div className="text-left">
                        <p className="border-t border-gray-500 pt-2">স্বাক্ষর (প্রদানকারী)</p>
                    </div>
                    <div className="text-right">
                        <p className="border-t border-gray-500 pt-2">স্বাক্ষর (গ্রহীতা)</p>
                    </div>
                </div>
                <p className="text-sm text-gray-400 mt-6 text-center">ধন্যবাদ!</p>
            </div>
            <button
                onClick={handlePrint}
                className="mt-6 w-full py-3 px-6 rounded-lg bg-gradient-to-r from-neon-blue to-neon-green text-neon-blue font-bold text-lg hover:from-neon-blue-light hover:to-neon-green-light transition-all duration-300 transform hover:scale-105 shadow-neon-glow print-hide"
            >
                রসিদ প্রিন্ট/PDF করুন
            </button>
          </div>
        </>
      )}

      {/* Custom Modal for Alerts */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 p-4">
          <div className="bg-gray-800 rounded-xl p-8 max-w-sm w-full shadow-2xl border border-neon-blue-dark animate-fade-in">
            <h3 className="text-xl font-bold text-neon-green mb-4">নোটিশ</h3>
            <p className="text-white mb-6">{modalMessage}</p>
            <button
              onClick={() => setShowModal(false)}
              className="w-full py-2 px-4 rounded-lg bg-gradient-to-r from-neon-blue to-neon-green text-gray-900 font-semibold hover:from-neon-blue-light hover:to-neon-green-light transition-all duration-300 transform hover:scale-105"
            >
              বন্ধ করুন
            </button>
          </div>
        </div>
      )}

      {/* Custom styles for neon glow and font */}
      <style>{`
        .font-inter {
          font-family: 'Inter', sans-serif;
        }
        .text-neon-blue { color: #00FFFF; } /* Cyan */
        .text-neon-blue-light { color: #80FFFF; }
        .text-neon-blue-dark { color: #00CDCD; }
        .text-neon-green { color: #39FF14; } /* Neon Green */
        .text-neon-green-light { color: #7FFF00; }
        .bg-neon-blue\/30 { background-color: rgba(0, 255, 255, 0.3); }
        .bg-neon-green\/30 { background-color: rgba(57, 255, 20, 0.3); }

        .shadow-neon-glow {
          box-shadow: 0 0 15px rgba(0, 255, 255, 0.6), 0 0 25px rgba(57, 255, 20, 0.4);
        }
        .drop-shadow-lg {
          filter: drop-shadow(0 0 8px rgba(0, 255, 255, 0.8));
        }

        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(-20px); }
          to { opacity: 1; transform: translateY(0); }
        }
        .animate-fade-in {
          animation: fadeIn 0.3s ease-out forwards;
        }
        .bg-gray-650 { background-color: #3f4045; } /* Slightly lighter than 700 */
        .bg-gray-750 { background-color: #2f3033; } /* Slightly darker than 700 */

        /* Print specific styles */
        @media print {
          body * {
            visibility: hidden; /* Hide everything by default */
          }
          #receipt-content, #receipt-content * {
            visibility: visible; /* Make receipt content visible */
          }
          #receipt-content {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%; /* A5 width is approx 148mm, adjust as needed for full page */
            height: auto;
            margin: 0;
            padding: 20mm; /* Standard A5 margins, adjust if needed */
            box-shadow: none;
            border: none;
            background-color: white !important; /* White background for print */
            color: black !important; /* Black text for print */
            font-size: 10pt; /* Adjust font size for print */
          }
          #receipt-content .text-neon-blue,
          #receipt-content .text-neon-green,
          #receipt-content .text-neon-green-light,
          #receipt-content .text-red-400,
          #receipt-content .text-orange-400 {
            color: black !important; /* Ensure all text is black for print */
          }
          #receipt-content .bg-gray-700 {
            background-color: white !important;
          }
          #receipt-content .border-neon-blue {
            border-color: #ccc !important; /* Lighter border for print */
          }
          .print-hide {
            display: none !important; /* Hide print button during print */
          }
          @page {
            size: A5 portrait; /* A5 size, portrait orientation */
            margin: 0; /* No default margins */
          }
          /* Adjust specific elements for print if needed */
          #receipt-content h3 {
            font-size: 18pt !important; /* Larger heading for print */
          }
          #receipt-content .text-xl {
            font-size: 14pt !important;
          }
          #receipt-content .text-lg {
            font-size: 12pt !important;
          }
          #receipt-content .text-base {
            font-size: 10pt !important;
          }
          #receipt-content .text-sm {
            font-size: 9pt !important;
          }
          #receipt-content .list-disc {
            margin-left: 10mm !important;
          }
          #receipt-content .border-t, #receipt-content .border-b {
            border-color: black !important; /* Ensure borders are black */
          }
        }
      `}</style>
    </div>
  );
}

export default App;
